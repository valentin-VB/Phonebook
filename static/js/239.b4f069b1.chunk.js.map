{"version":3,"file":"static/js/239.b4f069b1.chunk.js","mappings":"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","sources":["components/Input/Input.jsx","components/Toaster.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","components/ListItem/ListItem.styled.js","components/ListItem/ListItem.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","Redux/filter/selectors.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { TextField } from '@mui/material';\n\nfunction Input({\n  name,\n  label,\n  type,\n  autoFocus = false,\n  register,\n  autoComplete,\n  pattern,\n  title,\n  startadornment,\n}) {\n  return (\n    <TextField\n      type={type}\n      margin=\"normal\"\n      required\n      fullWidth\n      id={name}\n      label={label}\n      autoComplete={autoComplete}\n      autoFocus={autoFocus}\n      pattern={pattern}\n      title={title}\n      InputProps={{\n        startAdornment: startadornment,\n      }}\n      {...register(name)}\n    />\n  );\n}\n\nexport default Input;\n","import { Toaster } from 'react-hot-toast';\n\nexport const DefToaster = () => {\n  return (\n    <Toaster\n      position=\"top-center\"\n      reverseOrder={false}\n      gutter={20}\n      containerClassName=\"\"\n      containerStyle={{}}\n      toastOptions={{\n        success: {\n          duration: 4000,\n          theme: {\n            primary: 'green',\n            secondary: 'black',\n          },\n        },\n      }}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  margin: 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  font-size: 18px;\n  background-color: aliceblue;\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n`;\n","import React from 'react';\nimport { ErrorText } from 'components/Form/Form.styled';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport Input from 'components/Input';\nimport { Button, InputAdornment } from '@mui/material';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport PersonIcon from '@mui/icons-material/Person';\n\nlet schema = yup.object().shape({\n  name: yup.string().required('Name field is required').min(2, 'Too Short!'),\n  number: yup.number().integer().typeError('Phone field is required'),\n});\n\nconst ContactForm = ({ onFormSubmit }) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { name: '', number: '' },\n    resolver: yupResolver(schema),\n  });\n\n  const handleFormSubmit = data => {\n    onFormSubmit(data);\n    reset();\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit(data => {\n        handleFormSubmit(data);\n      })}\n    >\n      <Input\n        name=\"name\"\n        label=\"Name\"\n        type=\"text\"\n        register={register}\n        autoComplete=\"given-name\"\n        startadornment={\n          <InputAdornment position=\"start\">\n            <PersonIcon />\n          </InputAdornment>\n        }\n      ></Input>\n      <ErrorText> {errors.name?.message}</ErrorText>\n      <Input\n        name=\"number\"\n        type=\"tel\"\n        label=\"Phone\"\n        register={register}\n        startadornment={\n          <InputAdornment position=\"start\">\n            <PhoneIcon />\n          </InputAdornment>\n        }\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n      />\n      <ErrorText> {errors.number?.message}</ErrorText>\n      <Button type=\"submit\" variant=\"contained\">\n        Add Contact\n      </Button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ListEl = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  justify-content: space-between;\n  max-width: 350px;\n\n  padding: 10px;\n  border: 1px solid gray;\n  border-radius: 8px;\n  font-weight: 400;\n\n  :not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  &:hover {\n    background-color: #dee8eb;\n    border: 1px solid rgb(252, 252, 252);\n  }\n\n  button {\n    :hover {\n      path {\n        color: red;\n      }\n    }\n  }\n`;\n\nexport const Circle = styled.div`\n  position: relative;\n  width: 40px;\n  height: 40px;\n  background-color: red;\n  border-radius: 50px;\n`;\n\nexport const NameLeter = styled.span`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n`;\n// function getRandomColor() {\n//   var letters = '0123456789ABCDEF';\n//   var color = '#';\n//   for (var i = 0; i < 6; i++) {\n//     color += letters[Math.floor(Math.random() * 16)];\n//   }\n//   return color;\n// }\n","import { Circle, ListEl, NameLeter } from 'components/ListItem/ListItem.styled';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { IconButton, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\n\nconst ListItem = ({ contact, onBtnClick }) => {\n  const contactNameLetter = contact?.name[0].toUpperCase();\n  const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n\n  return (\n    <ListEl>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '20px',\n          padding: 0,\n        }}\n      >\n        <Circle style={{ backgroundColor: `#${randomColor}` }}>\n          <NameLeter>{contactNameLetter}</NameLeter>\n        </Circle>\n        <div>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              fontSize: '16px',\n            }}\n          >\n            {contact.name}\n          </Typography>\n          <Typography>{contact.number}</Typography>\n        </div>\n      </Box>\n      <IconButton\n        type=\"button\"\n        id={contact.id}\n        onClick={evt => onBtnClick(evt)}\n      >\n        <DeleteIcon />\n      </IconButton>\n    </ListEl>\n  );\n};\n\nexport default ListItem;\n","import ListItem from 'components/ListItem';\n\nfunction ContactsList({ contacts, onBtnClick }) {\n  return (\n    contacts.length > 0 && (\n      <ul>\n        {contacts.map(contact => {\n          return (\n            <ListItem\n              key={contact.id}\n              contact={contact}\n              onBtnClick={onBtnClick}\n            ></ListItem>\n          );\n        })}\n      </ul>\n    )\n  );\n}\n\nexport default ContactsList;\n","import { TextField } from '@mui/material';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <TextField\n      name=\"filter\"\n      label=\"Search...\"\n      type=\"text\"\n      onChange={onChange}\n      value={value}\n      fullWidth\n      id=\"outlined-basic\"\n      sx={{\n        mb: '15px',\n      }}\n    />\n  );\n};\n\nexport default Filter;\n","export const selectFilter = state => state.filter;\n","import Form from 'components/Form';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterUpdate } from 'Redux/filter/filterSlice';\nimport {\n  useAddContactsMutation,\n  useGetContactsQuery,\n  useDeleteContactMutation,\n} from 'Redux/contacts/contactsApi';\nimport { selectFilter } from 'Redux/filter/selectors';\nimport { DefToaster } from 'components/Toaster';\nimport { Box } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const {\n    data: contacts,\n    error,\n    isLoading,\n  } = useGetContactsQuery('', {\n    refetchOnMountOrArgChange: true,\n  });\n  const [addContact] = useAddContactsMutation();\n  const [deleteContact] = useDeleteContactMutation();\n\n  // console.log('isLoading', isLoading);\n  // console.log('error', error);\n  // console.log('contacts', contacts);\n\n  const filter = useSelector(selectFilter);\n\n  const handleFormSubmit = async contactInfo => {\n    const isDuplicated = contacts.some(\n      oldContact => oldContact.name.trim() === contactInfo.name.trim()\n    );\n\n    if (isDuplicated) {\n      alert(`${contactInfo.name} is already in contacts`);\n      return;\n    }\n\n    try {\n      toast.success('Successfully created!');\n      await addContact(contactInfo);\n    } catch (e) {\n      console.warn('e', e);\n      toast.error(\"Wasn't able to create contact\");\n    }\n  };\n\n  // const visableContacts = useMemo(() => { return contacts.filter(contact =>\n  //   contact.name.toLowerCase().includes(filter.toLowerCase()))\n  // }, [contacts, filter]);\n\n  const visiableContacts = () => {\n    if (!contacts) {\n      return;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const handleDeletBthClick = async evt => {\n    const id = evt.currentTarget.id;\n    try {\n      await deleteContact(id);\n      toast.success('Successfully deleted!');\n    } catch (e) {\n      console.warn('e', e);\n      toast.error('Oops! Something Went Wrong');\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        maxWidth: 350,\n      }}\n    >\n      <h1>Add Contact</h1>\n      <Form onFormSubmit={handleFormSubmit}></Form>\n      <h2>Contacts</h2>\n      <Filter\n        value={filter}\n        onChange={evt => dispatch(filterUpdate(evt.currentTarget.value))}\n      ></Filter>\n      {isLoading && !error && (\n        <b>\n          <br></br>Loading contacts...\n        </b>\n      )}\n      {!isLoading && error && <p>{error}</p>}\n      {contacts && (\n        <ContactsList\n          onBtnClick={handleDeletBthClick}\n          contacts={visiableContacts()}\n        ></ContactsList>\n      )}\n      <DefToaster />\n    </Box>\n  );\n}\n"],"names":["name","label","type","autoFocus","register","autoComplete","pattern","title","startadornment","TextField","margin","required","fullWidth","id","InputProps","startAdornment","DefToaster","position","reverseOrder","gutter","containerClassName","containerStyle","toastOptions","success","duration","theme","primary","secondary","ErrorText","styled","schema","yup","shape","min","number","integer","typeError","onFormSubmit","useForm","defaultValues","resolver","yupResolver","handleSubmit","reset","errors","formState","onSubmit","data","handleFormSubmit","InputAdornment","Person","message","Phone","Button","variant","ListEl","Circle","NameLeter","contact","onBtnClick","contactNameLetter","toUpperCase","randomColor","Math","floor","random","toString","Box","sx","display","alignItems","gap","padding","style","backgroundColor","Typography","fontSize","IconButton","onClick","evt","Delete","contacts","length","map","value","onChange","mb","selectFilter","state","filter","Contacts","dispatch","useDispatch","useGetContactsQuery","refetchOnMountOrArgChange","error","isLoading","useAddContactsMutation","addContact","useDeleteContactMutation","deleteContact","useSelector","contactInfo","some","oldContact","trim","alert","toast","console","warn","handleDeletBthClick","currentTarget","maxWidth","Form","filterUpdate","toLowerCase","includes","visiableContacts"],"sourceRoot":""}